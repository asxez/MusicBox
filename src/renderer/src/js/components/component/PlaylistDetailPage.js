/**
 * Ê≠åÂçïÈ°µÁªÑ‰ª∂
 */

class PlaylistDetailPage extends Component {
    constructor(container) {
        super(container);
        this.isVisible = false;
        this.currentPlaylist = null;
        this.tracks = [];
        this.selectedTracks = new Set();
        this.isMultiSelectMode = false;

        this.setupElements();
        this.setupEventListeners();

        console.log('üéµ PlaylistDetailPage: ÁªÑ‰ª∂ÂàùÂßãÂåñÂÆåÊàê');
    }

    setupElements() {
        this.container = this.element;
    }

    setupEventListeners() {
        // ‰∫ã‰ª∂ÁõëÂê¨Â∞ÜÂú®renderÊñπÊ≥ï‰∏≠Âä®ÊÄÅÊ∑ªÂä†
    }

    async show(playlist) {
        this.isVisible = true;
        this.currentPlaylist = playlist;

        if (this.element) {
            // È¢ÑËÆæÊ†∑ÂºèÔºåÂáèÂ∞ëÂèØËßÅÁöÑÊ†∑ÂºèÂèòÊç¢
            this.element.style.display = 'block';
            this.element.style.opacity = '0';
            this.element.style.transform = 'translateY(10px)';
        }

        // ÊØèÊ¨°ÊòæÁ§∫Êñ∞Ê≠åÂçïÊó∂ÈÉΩÈúÄË¶ÅÈáçÊñ∞ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®

        await this.loadPlaylistCover();
        await this.loadPlaylistTracks();
        this.render();

        // Âπ≥ÊªëÊòæÁ§∫È°µÈù¢
        if (this.element) {
            requestAnimationFrame(() => {
                this.element.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                this.element.style.opacity = '1';
                this.element.style.transform = 'translateY(0)';
            });
        }

        console.log('üéµ PlaylistDetailPage: ÊòæÁ§∫Ê≠åÂçïËØ¶ÊÉÖ', playlist.name);
    }

    hide() {
        this.isVisible = false;
        this.currentPlaylist = null;
        this.tracks = [];

        // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
        if (this.documentClickHandler) {
            document.removeEventListener('click', this.documentClickHandler);
            this.documentClickHandler = null;
        }

        if (this.container) {
            this.container.innerHTML = '';
        }
        console.log('üéµ PlaylistDetailPage: ÈöêËóèÊ≠åÂçïËØ¶ÊÉÖ');
    }

    render() {
        if (!this.currentPlaylist || !this.container) return;

        const createdDate = new Date(this.currentPlaylist.createdAt);
        const trackCount = this.currentPlaylist.trackIds ? this.currentPlaylist.trackIds.length : 0;
        const totalDuration = this.calculateTotalDuration();

        this.container.innerHTML = `
            <div class="page-content playlist-page">
                <!-- Áé∞‰ª£ÂåñHeroÂå∫Âüü -->
                <div class="playlist-hero">
                    <div class="hero-background">
                        <div class="gradient-overlay"></div>
                    </div>
                    <div class="hero-content">
                        <div class="playlist-cover-container">
                            <div class="playlist-cover" id="playlist-cover" data-playlist-id="${this.currentPlaylist.id}">
                                ${this.renderPlaylistCover()}
                                <div class="cover-shadow"></div>
                            </div>
                        </div>
                        <div class="playlist-info">
                            <div class="playlist-type">
                                <svg class="type-icon" viewBox="0 0 24 24">
                                    <path d="M15,6H3V8H15V6M15,10H3V12H15V10M3,16H11V14H3V16M17,6V14.18C16.69,14.07 16.35,14 16,14A3,3 0 0,0 13,17A3,3 0 0,0 16,20A3,3 0 0,0 19,17V8H22V6H17Z"/>
                                </svg>
                                <span>Ê≠åÂçï</span>
                            </div>
                            <h1 class="playlist-title">${this.escapeHtml(this.currentPlaylist.name)}</h1>
                            ${this.currentPlaylist.description ? `
                            <p class="playlist-description">${this.escapeHtml(this.currentPlaylist.description)}</p>
                            ` : ''}
                            <div class="playlist-meta">
                                <span class="meta-item">
                                    <svg class="meta-icon" viewBox="0 0 24 24">
                                        <path d="M12,3V12.26C11.5,12.09 11,12 10.5,12C8.01,12 6,14.01 6,16.5S8.01,21 10.5,21S15,18.99 15,16.5V6H19V3H12Z"/>
                                    </svg>
                                    <span>${trackCount} È¶ñÊ≠åÊõ≤</span>
                                </span>
                                ${totalDuration ? `
                                <span class="meta-item">
                                    <svg class="meta-icon" viewBox="0 0 24 24">
                                        <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M16.2,16.2L11,13V7H12.5V12.2L17,14.9L16.2,16.2Z"/>
                                    </svg>
                                    <span>${this.formatTotalDuration(totalDuration)}</span>
                                </span>
                                ` : ''}
                                <span class="meta-item">
                                    <svg class="meta-icon" viewBox="0 0 24 24">
                                        <path d="M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z"/>
                                    </svg>
                                    <span>ÂàõÂª∫‰∫é ${createdDate.toLocaleDateString('zh-CN')}</span>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Áé∞‰ª£ÂåñÊìç‰ΩúÊåâÈíÆÂå∫Âüü -->
                <div class="playlist-actions">
                    <div class="actions-primary">
                        <button class="play-btn primary" id="playlist-play-all" ${trackCount === 0 ? 'disabled' : ''}>
                            <div class="btn-content">
                                <svg class="play-icon" viewBox="0 0 24 24">
                                    <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                                </svg>
                                <span class="btn-text">Êí≠ÊîæÂÖ®ÈÉ®</span>
                            </div>
                        </button>
                        <button class="shuffle-btn secondary" id="playlist-shuffle" ${trackCount === 0 ? 'disabled' : ''}>
                            <svg class="shuffle-icon" viewBox="0 0 24 24">
                                <path d="M14.83,13.41L13.42,14.82L16.55,17.95L14.5,20H20V14.5L17.96,16.54L14.83,13.41M14.5,4L16.54,6.04L4,18.59L5.41,20L17.96,7.46L20,9.5V4M10.59,9.17L5.41,4L4,5.41L9.17,10.58L10.59,9.17Z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="actions-secondary">
                        <button class="action-btn add-songs" id="playlist-add-songs">
                            <svg class="icon" viewBox="0 0 24 24">
                                <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
                            </svg>
                            <span>Ê∑ªÂä†Ê≠åÊõ≤</span>
                        </button>
                        <div class="action-menu">
                            <button class="action-btn menu-trigger" id="playlist-menu">
                                <svg class="icon" viewBox="0 0 24 24">
                                    <path d="M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z"/>
                                </svg>
                            </button>
                            <div class="menu-dropdown" id="playlist-menu-dropdown">
                                <button class="menu-item" id="playlist-clear" ${trackCount === 0 ? 'disabled' : ''}>
                                    <svg class="menu-icon" viewBox="0 0 24 24">
                                        <path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"/>
                                    </svg>
                                    <span>Ê∏ÖÁ©∫Ê≠åÂçï</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Áé∞‰ª£ÂåñÊ≠åÊõ≤ÂàóË°®Âå∫Âüü -->
                <div class="tracks-section">
                    ${trackCount > 0 ? `
                    <div class="tracks-header">
                        <div class="header-left">
                            <h3 class="tracks-title">Ê≠åÊõ≤ÂàóË°®</h3>
                            <span class="tracks-count">${trackCount} È¶ñÊ≠åÊõ≤</span>
                        </div>
                        <div class="header-right">
                            <div class="tracks-controls">
                                <button class="control-btn" id="select-all-tracks">
                                    <svg class="icon" viewBox="0 0 24 24">
                                        <path d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z"/>
                                    </svg>
                                    <span>ÂÖ®ÈÄâ</span>
                                </button>
                                <button class="control-btn" id="clear-selection" style="display: none;">
                                    <svg class="icon" viewBox="0 0 24 24">
                                        <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z"/>
                                    </svg>
                                    <span>ÂèñÊ∂àÈÄâÊã©</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    ` : ''}
                    <!-- ÂßãÁªàÊ∏≤Êüìtracks-containerÔºåÁ°Æ‰øùDOMÁªìÊûÑ‰∏ÄËá¥ -->
                    <div class="tracks-container" id="playlist-track-list">
                        ${this.renderTrackList()}
                    </div>
                </div>
            </div>
        `;

        this.setupDynamicEventListeners();

        // Áõ¥Êé•ÁªëÂÆö‰∫ã‰ª∂ÔºåÂõ†‰∏∫DOMÁªìÊûÑÁé∞Âú®ÊòØ‰∏ÄËá¥ÁöÑ
        this.setupTrackListEvents();
    }

    setupDynamicEventListeners() {
        console.log('üîß PlaylistDetailPage: ËÆæÁΩÆÂä®ÊÄÅ‰∫ã‰ª∂ÁõëÂê¨Âô®');

        // Êí≠ÊîæÂÖ®ÈÉ®ÊåâÈíÆ
        const playAllBtn = this.container.querySelector('#playlist-play-all');
        if (playAllBtn) {
            playAllBtn.addEventListener('click', () => this.playAllTracks());
            console.log('‚úÖ ÁªëÂÆöÊí≠ÊîæÂÖ®ÈÉ®ÊåâÈíÆ‰∫ã‰ª∂');
        }

        // ÈöèÊú∫Êí≠ÊîæÊåâÈíÆ
        const shuffleBtn = this.container.querySelector('#playlist-shuffle');
        if (shuffleBtn) {
            shuffleBtn.addEventListener('click', () => this.shufflePlayTracks());
            console.log('‚úÖ ÁªëÂÆöÈöèÊú∫Êí≠ÊîæÊåâÈíÆ‰∫ã‰ª∂');
        }

        // Ê∑ªÂä†Ê≠åÊõ≤ÊåâÈíÆ
        const addSongsBtn = this.container.querySelector('#playlist-add-songs');
        if (addSongsBtn) {
            addSongsBtn.addEventListener('click', () => this.showAddSongsDialog());
            console.log('‚úÖ ÁªëÂÆöÊ∑ªÂä†Ê≠åÊõ≤ÊåâÈíÆ‰∫ã‰ª∂');
        } else {
            console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞Ê∑ªÂä†Ê≠åÊõ≤ÊåâÈíÆÂÖÉÁ¥†');
        }

        // ÂÖ®ÈÄâÊåâÈíÆ
        const selectAllBtn = this.container.querySelector('#select-all-tracks');
        if (selectAllBtn) {
            selectAllBtn.addEventListener('click', () => this.selectAllTracks());
        }

        // Ê∏ÖÈô§ÈÄâÊã©ÊåâÈíÆ
        const clearSelectionBtn = this.container.querySelector('#clear-selection');
        if (clearSelectionBtn) {
            clearSelectionBtn.addEventListener('click', () => this.clearSelection());
        }

        // ËèúÂçïÊåâÈíÆ
        const menuBtn = this.container.querySelector('#playlist-menu');
        const menuDropdown = this.container.querySelector('#playlist-menu-dropdown');
        if (menuBtn && menuDropdown) {
            menuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                menuDropdown.classList.toggle('show');
                console.log('üîß ËèúÂçïÊåâÈíÆÁÇπÂáªÔºåÂàáÊç¢ÊòæÁ§∫Áä∂ÊÄÅ');
            });
            console.log('‚úÖ ÁªëÂÆöËèúÂçïÊåâÈíÆ‰∫ã‰ª∂');

            // ËÆæÁΩÆdocumentÁÇπÂáªÁõëÂê¨Âô®ÔºàÊØèÊ¨°ÈÉΩÈáçÊñ∞ËÆæÁΩÆÔºåÂõ†‰∏∫DOMÂ∑≤ÈáçÊñ∞ÁîüÊàêÔºâ
            this.setupDocumentClickHandler(menuDropdown);

            // ËèúÂçïÈ°π‰∫ã‰ª∂
            const clearBtn = menuDropdown.querySelector('#playlist-clear');
            if (clearBtn) {
                clearBtn.addEventListener('click', async () => {
                    menuDropdown.classList.remove('show');
                    console.log('üîß Ê∏ÖÁ©∫Ê≠åÂçïÊåâÈíÆÁÇπÂáª');
                    await this.clearPlaylist();
                });
                console.log('‚úÖ ÁªëÂÆöÊ∏ÖÁ©∫Ê≠åÂçïÊåâÈíÆ‰∫ã‰ª∂');
            } else {
                console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞Ê∏ÖÁ©∫Ê≠åÂçïÊåâÈíÆÂÖÉÁ¥†');
            }
        } else {
            console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞ËèúÂçïÊåâÈíÆÊàñ‰∏ãÊãâËèúÂçïÂÖÉÁ¥†');
        }

        // setupTrackListEvents() Â∑≤Âú® render() ÊñπÊ≥ï‰∏≠Ë∞ÉÁî®ÔºåËøôÈáå‰∏çÈúÄË¶ÅÈáçÂ§çË∞ÉÁî®
        this.setupCoverContextMenu();
    }

    // ËÆæÁΩÆdocumentÁÇπÂáªÁõëÂê¨Âô®ÔºåÈÅøÂÖçÈáçÂ§çÁªëÂÆö
    setupDocumentClickHandler(menuDropdown) {
        // ÂÖàÁßªÈô§ÊóßÁöÑÁõëÂê¨Âô®
        if (this.documentClickHandler) {
            document.removeEventListener('click', this.documentClickHandler);
        }

        // ÂàõÂª∫Êñ∞ÁöÑÁõëÂê¨Âô®
        this.documentClickHandler = () => {
            menuDropdown.classList.remove('show');
        };

        // Ê∑ªÂä†Êñ∞ÁöÑÁõëÂê¨Âô®
        document.addEventListener('click', this.documentClickHandler);
        console.log('‚úÖ ËÆæÁΩÆdocumentÁÇπÂáªÁõëÂê¨Âô®');
    }

    async loadPlaylistCover() {
        try {
            const result = await api.getPlaylistCover(this.currentPlaylist.id);
            if (result.success && result.coverPath) {
                this.currentPlaylist.coverImage = result.coverPath;
                console.log('‚úÖ PlaylistDetailPage: Âä†ËΩΩÊ≠åÂçïÂ∞ÅÈù¢ÊàêÂäü', result.coverPath);
            } else {
                this.currentPlaylist.coverImage = null;
                console.log('üì∑ PlaylistDetailPage: Ê≠åÂçïÊó†Ëá™ÂÆö‰πâÂ∞ÅÈù¢');
            }
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: Âä†ËΩΩÊ≠åÂçïÂ∞ÅÈù¢Â§±Ë¥•', error);
            this.currentPlaylist.coverImage = null;
        }
    }

    async loadPlaylistTracks() {
        try {
            const result = await window.electronAPI.library.getPlaylistDetail(this.currentPlaylist.id);
            if (result.success) {
                this.tracks = result.playlist.tracks || [];
                this.render();
                // Á°Æ‰øùDOMÊõ¥Êñ∞ÂêéÂÜçÁªëÂÆö‰∫ã‰ª∂
                setTimeout(() => {
                    this.setupTrackListEvents();
                }, 50);
            } else {
                console.error('‚ùå PlaylistDetailPage: Âä†ËΩΩÊ≠åÂçïÊ≠åÊõ≤Â§±Ë¥•', result.error);
                this.tracks = [];
                this.render();
            }
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: Âä†ËΩΩÊ≠åÂçïÊ≠åÊõ≤Â§±Ë¥•', error);
            this.tracks = [];
            this.render();
        }
    }

    renderTrackList() {
        if (this.tracks.length === 0) {
            return `
                <div class="playlist-empty-state">
                    <div class="empty-content">
                        <div class="empty-illustration">
                            <svg class="empty-icon" viewBox="0 0 24 24">
                                <path d="M12,3V12.26C11.5,12.09 11,12 10.5,12C8.01,12 6,14.01 6,16.5S8.01,21 10.5,21S15,18.99 15,16.5V6H19V3H12Z"/>
                            </svg>
                            <div class="empty-waves">
                                <div class="wave wave-1"></div>
                                <div class="wave wave-2"></div>
                                <div class="wave wave-3"></div>
                            </div>
                        </div>
                        <h3 class="empty-title">Ê≠åÂçïËøòÊòØÁ©∫ÁöÑ</h3>
                        <p class="empty-description">Ê∑ªÂä†‰∏Ä‰∫õÊÇ®ÂñúÊ¨¢ÁöÑÈü≥‰πêÔºåÂºÄÂßãÊÇ®ÁöÑÈü≥‰πê‰πãÊóÖ</p>
                        <button class="empty-action-btn" onclick="document.getElementById('playlist-add-songs').click()">
                            <svg class="icon" viewBox="0 0 24 24">
                                <path d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
                            </svg>
                            <span>Ê∑ªÂä†Ê≠åÊõ≤</span>
                        </button>
                    </div>
                </div>
            `;
        }

        return `
            <div class="modern-tracks-table">
                <div class="tracks-table-header">
                    <div class="header-cell cell-number">#</div>
                    <div class="header-cell cell-title">Ê≠åÊõ≤</div>
                    <div class="header-cell cell-album">‰∏ìËæë</div>
                    <div class="header-cell cell-duration">
                        <svg class="duration-icon" viewBox="0 0 24 24">
                            <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M16.2,16.2L11,13V7H12.5V12.2L17,14.9L16.2,16.2Z"/>
                        </svg>
                    </div>
                    <div class="header-cell cell-actions"></div>
                </div>
                <div class="tracks-table-body">
                    ${this.tracks.map((track, index) => `
                        <div class="track-row ${this.selectedTracks.has(index) ? 'selected' : ''}" data-track-index="${index}">
                            <div class="track-cell cell-number">
                                <div class="track-number-container">
                                    <span class="track-number">${index + 1}</span>
                                    <div class="play-indicator">
                                        <svg class="play-icon" viewBox="0 0 24 24">
                                            <path d="M8,5.14V19.14L19,12.14L8,5.14Z"/>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="track-cell cell-title">
                                <div class="track-main-info">
                                    <div class="track-name">${this.escapeHtml(track.title || track.fileName)}</div>
                                    <div class="track-artist">${this.escapeHtml(track.artist || 'Êú™Áü•Ëâ∫ÊúØÂÆ∂')}</div>
                                </div>
                            </div>
                            <div class="track-cell cell-album">
                                <span class="album-name">${this.escapeHtml(track.album || 'Êú™Áü•‰∏ìËæë')}</span>
                            </div>
                            <div class="track-cell cell-duration">
                                <span class="duration-text">${this.formatDuration(track.duration)}</span>
                            </div>
                            <div class="track-cell cell-actions">
                                <div class="track-actions">
                                    <button class="track-action-btn like-btn" data-action="like">
                                        <svg class="icon" viewBox="0 0 24 24">
                                            <path d="M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5 2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z"/>
                                        </svg>
                                    </button>
                                    <button class="track-action-btn remove-btn" data-action="remove">
                                        <svg class="icon" viewBox="0 0 24 24">
                                            <path d="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }

    setupTrackListEvents() {
        const trackListContainer = this.container.querySelector('#playlist-track-list');
        if (!trackListContainer) {
            console.warn('‚ö†Ô∏è PlaylistDetailPage: Êú™ÊâæÂà∞Ê≠åÊõ≤ÂàóË°®ÂÆπÂô®');
            return;
        }

        // ÂØπ‰∫éÁ©∫Ê≠åÂçïÔºåÂÆπÂô®Â≠òÂú®‰ΩÜÊ≤°ÊúâÊ≠åÊõ≤Ë°åÔºåËøôÊòØÊ≠£Â∏∏ÊÉÖÂÜµ
        if (this.tracks && this.tracks.length === 0) {
            console.log('üìù PlaylistDetailPage: Ê≠åÂçï‰∏∫Á©∫ÔºåË∑≥ËøáÊ≠åÊõ≤Ë°å‰∫ã‰ª∂ÁªëÂÆö');
            return;
        }

        const trackRows = trackListContainer.querySelectorAll('.track-row');
        console.log(`üîß PlaylistDetailPage: ËÆæÁΩÆÊ≠åÊõ≤ÂàóË°®‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºåÂÖ± ${trackRows.length} È¶ñÊ≠åÊõ≤`);

        // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨
        trackRows.forEach(item => {
            const index = parseInt(item.dataset.trackIndex);
            const track = this.tracks[index];

            // ‰∏ªË¶ÅÁÇπÂáª‰∫ã‰ª∂
            item.addEventListener('click', async (e) => {
                // Â¶ÇÊûúÁÇπÂáªÁöÑÊòØÊìç‰ΩúÊåâÈíÆÔºå‰∏çÂ§ÑÁêÜ
                if (e.target.closest('.track-action-btn')) {
                    return;
                }

                // Â§öÈÄâÊ®°ÂºèÂ§ÑÁêÜ
                if (e.ctrlKey || e.metaKey) {
                    this.toggleTrackSelection(index);
                } else if (e.shiftKey && this.selectedTracks.size > 0) {
                    this.selectTrackRange(index);
                } else if (this.isMultiSelectMode) {
                    this.toggleTrackSelection(index);
                }
            });

            // ÂèåÂáªÊí≠Êîæ
            item.addEventListener('dblclick', async (e) => {
                if (!e.target.closest('.track-action-btn')) {
                    await this.playAllTracks();
                    // await this.playTrack(track, index);
                }
            });

            // Êìç‰ΩúÊåâÈíÆ
            const likeBtn = item.querySelector('[data-action="like"]');
            if (likeBtn) {
                likeBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.toggleTrackLike(track, index);
                });
            }

            const removeBtn = item.querySelector('[data-action="remove"]');
            if (removeBtn) {
                removeBtn.addEventListener('click', async (e) => {
                    e.stopPropagation();
                    console.log(`üîß Âà†Èô§ÊåâÈíÆÁÇπÂáª: ${track.title} (Á¥¢Âºï: ${index})`);
                    if (this.selectedTracks.size > 1 && this.selectedTracks.has(index)) {
                        console.log('üîß ÊâßË°åÊâπÈáèÂà†Èô§');
                        await this.removeSelectedTracks();
                    } else {
                        console.log('üîß ÊâßË°åÂçïÈ¶ñÊ≠åÊõ≤Âà†Èô§');
                        await this.removeTrackFromPlaylist(track, index);
                    }
                });
                console.log(`‚úÖ ÁªëÂÆöÂà†Èô§ÊåâÈíÆ‰∫ã‰ª∂: ${track.title}`);
            }
        });
    }

    async playTrack(track, index) {
        try {
            console.log('üéµ PlaylistDetailPage: Êí≠ÊîæÊ≠åÊõ≤', track.title);
            this.emit('trackPlayed', track, index);
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: Êí≠ÊîæÊ≠åÊõ≤Â§±Ë¥•', error);
        }
    }

    async playAllTracks() {
        if (this.tracks.length === 0) {
            if (window.app && window.app.showInfo) {
                window.app.showInfo('Ê≠åÂçï‰∏∫Á©∫ÔºåÊó†Ê≥ïÊí≠Êîæ');
            }
            return;
        }
        try {
            console.log('üéµ PlaylistDetailPage: Êí≠ÊîæÂÖ®ÈÉ®Ê≠åÊõ≤');
            this.emit('playAllTracks', this.tracks);
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: Êí≠ÊîæÂÖ®ÈÉ®Â§±Ë¥•', error);
        }
    }

    async shufflePlayTracks() {
        if (this.tracks.length === 0) {
            if (window.app && window.app.showInfo) {
                window.app.showInfo('Ê≠åÂçï‰∏∫Á©∫ÔºåÊó†Ê≥ïÊí≠Êîæ');
            }
            return;
        }

        try {
            // ÂàõÂª∫ÈöèÊú∫Êí≠ÊîæÂàóË°®
            const shuffledTracks = [...this.tracks].sort(() => Math.random() - 0.5);
            console.log('üéµ PlaylistDetailPage: ÈöèÊú∫Êí≠ÊîæÊ≠åÊõ≤');
            this.emit('playAllTracks', shuffledTracks);
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: ÈöèÊú∫Êí≠ÊîæÂ§±Ë¥•', error);
        }
    }

    showAddSongsDialog() {
        this.emit('showAddSongsDialog', this.currentPlaylist);
    }

    async clearPlaylist() {
        if (!this.currentPlaylist || !this.tracks.length) return;

        const confirmMessage = `Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫Ê≠åÂçï"${this.currentPlaylist.name}"ÂêóÔºü\nËøôÂ∞ÜÁßªÈô§Ê≠åÂçï‰∏≠ÁöÑÊâÄÊúâ ${this.tracks.length} È¶ñÊ≠åÊõ≤ÔºåÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ`;
        if (!confirm(confirmMessage)) {
            return;
        }

        try {
            // ÊâπÈáèÁßªÈô§ÊâÄÊúâÊ≠åÊõ≤
            const trackIds = this.tracks.map(track => track.fileId);
            const result = await window.electronAPI.library.removeFromPlaylist(
                this.currentPlaylist.id,
                trackIds
            );

            if (result.success) {
                console.log('‚úÖ Ê≠åÂçïÊ∏ÖÁ©∫ÊàêÂäü');

                // ÈáçÊñ∞Âä†ËΩΩÊ≠åÂçï
                await this.loadPlaylistTracks();
                this.render();

                // Ëß¶ÂèëÊ≠åÂçïÊõ¥Êñ∞‰∫ã‰ª∂
                this.emit('playlistUpdated', this.currentPlaylist);

                if (window.app && window.app.showInfo) {
                    window.app.showInfo(`Ê≠åÂçï"${this.currentPlaylist.name}"Â∑≤Ê∏ÖÁ©∫`);
                }
            } else {
                console.error('‚ùå Ê∏ÖÁ©∫Ê≠åÂçïÂ§±Ë¥•:', result.error);
                if (window.app && window.app.showError) {
                    window.app.showError(result.error || 'Ê∏ÖÁ©∫Ê≠åÂçïÂ§±Ë¥•');
                }
            }
        } catch (error) {
            console.error('‚ùå Ê∏ÖÁ©∫Ê≠åÂçïÂºÇÂ∏∏:', error);
            if (window.app && window.app.showError) {
                window.app.showError('Ê∏ÖÁ©∫Ê≠åÂçïÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    // Â§öÈÄâÂäüËÉΩÊñπÊ≥ï
    toggleTrackSelection(index) {
        if (this.selectedTracks.has(index)) {
            this.selectedTracks.delete(index);
        } else {
            this.selectedTracks.add(index);
        }

        this.updateMultiSelectMode();
        this.updateTrackSelectionUI();
    }

    selectTrackRange(endIndex) {
        const selectedIndices = Array.from(this.selectedTracks);
        if (selectedIndices.length === 0) {
            this.selectedTracks.add(endIndex);
        } else {
            const startIndex = Math.max(...selectedIndices);
            const minIndex = Math.min(startIndex, endIndex);
            const maxIndex = Math.max(startIndex, endIndex);

            for (let i = minIndex; i <= maxIndex; i++) {
                this.selectedTracks.add(i);
            }
        }
        this.updateMultiSelectMode();
        this.updateTrackSelectionUI();
    }

    selectAllTracks() {
        this.selectedTracks.clear();
        for (let i = 0; i < this.tracks.length; i++) {
            this.selectedTracks.add(i);
        }
        this.updateMultiSelectMode();
        this.updateTrackSelectionUI();
    }

    clearSelection() {
        this.selectedTracks.clear();
        this.updateMultiSelectMode();
        this.updateTrackSelectionUI();
    }

    updateMultiSelectMode() {
        this.isMultiSelectMode = this.selectedTracks.size > 0;

        // Êõ¥Êñ∞Ê∏ÖÈô§ÈÄâÊã©ÊåâÈíÆÁöÑÊòæÁ§∫Áä∂ÊÄÅ
        const clearSelectionBtn = this.container.querySelector('#clear-selection');
        if (clearSelectionBtn) {
            clearSelectionBtn.style.display = this.isMultiSelectMode ? 'block' : 'none';
        }

        // Êõ¥Êñ∞ÂÖ®ÈÄâÊåâÈíÆÊñáÊú¨
        const selectAllBtn = this.container.querySelector('#select-all-tracks');
        if (selectAllBtn) {
            if (this.selectedTracks.size === this.tracks.length && this.tracks.length > 0) {
                selectAllBtn.textContent = 'ÂèñÊ∂àÂÖ®ÈÄâ';
                selectAllBtn.onclick = () => this.clearSelection();
            } else {
                selectAllBtn.textContent = 'ÂÖ®ÈÄâ';
                selectAllBtn.onclick = () => this.selectAllTracks();
            }
        }
    }

    updateTrackSelectionUI() {
        const trackItems = this.container.querySelectorAll('.playlist-track-item');
        trackItems.forEach((item, index) => {
            if (this.selectedTracks.has(index)) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        });
    }

    async removeSelectedTracks() {
        if (this.selectedTracks.size === 0) return;

        const selectedCount = this.selectedTracks.size;
        if (!confirm(`Á°ÆÂÆöË¶Å‰ªéÊ≠åÂçï‰∏≠ÁßªÈô§ÈÄâ‰∏≠ÁöÑ ${selectedCount} È¶ñÊ≠åÊõ≤ÂêóÔºü`)) {
            return;
        }

        try {
            const selectedIndices = Array.from(this.selectedTracks).sort((a, b) => b - a); // ‰ªéÂêéÂæÄÂâçÂà†Èô§
            let successCount = 0;
            let failCount = 0;

            for (const index of selectedIndices) {
                const track = this.tracks[index];
                if (track) {
                    try {
                        const result = await window.electronAPI.library.removeFromPlaylist(
                            this.currentPlaylist.id,
                            track.fileId
                        );

                        if (result.success) {
                            successCount++;
                        } else {
                            failCount++;
                            console.warn('‚ùå ÁßªÈô§Ê≠åÊõ≤Â§±Ë¥•:', track.title, result.error);
                        }
                    } catch (error) {
                        failCount++;
                        console.error('‚ùå ÁßªÈô§Ê≠åÊõ≤ÂºÇÂ∏∏:', track.title, error);
                    }
                }
            }

            console.log(`‚úÖ ÊâπÈáèÁßªÈô§Ê≠åÊõ≤ÂÆåÊàê: ÊàêÂäü ${successCount}, Â§±Ë¥• ${failCount}`);

            // Ê∏ÖÈô§ÈÄâÊã©Áä∂ÊÄÅ
            this.clearSelection();

            // ÈáçÊñ∞Âä†ËΩΩÊ≠åÂçï
            await this.loadPlaylistTracks();
            this.render();

            // Ëß¶ÂèëÊ≠åÂçïÊõ¥Êñ∞‰∫ã‰ª∂
            this.emit('playlistUpdated', this.currentPlaylist);

            if (window.app && window.app.showInfo) {
                if (failCount === 0) {
                    window.app.showInfo(`ÊàêÂäüÁßªÈô§ ${successCount} È¶ñÊ≠åÊõ≤`);
                } else {
                    window.app.showInfo(`ÁßªÈô§ÂÆåÊàêÔºöÊàêÂäü ${successCount} È¶ñÔºåÂ§±Ë¥• ${failCount} È¶ñ`);
                }
            }
        } catch (error) {
            console.error('‚ùå ÊâπÈáèÁßªÈô§Ê≠åÊõ≤Â§±Ë¥•:', error);
            if (window.app && window.app.showError) {
                window.app.showError('ÊâπÈáèÁßªÈô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    toggleTrackLike(track, index) {
        // ÂèØ‰ª•ÂÆûÁé∞ÂñúÊ¨¢/ÂèñÊ∂àÂñúÊ¨¢ÂäüËÉΩ
        console.log('üéµ ÂàáÊç¢Ê≠åÊõ≤ÂñúÊ¨¢Áä∂ÊÄÅ:', track.title);
        // TODO: ÂÆûÁé∞ÂñúÊ¨¢ÂäüËÉΩ
    }

    async removeTrackFromPlaylist(track, index) {
        if (!confirm(`Á°ÆÂÆöË¶Å‰ªéÊ≠åÂçï‰∏≠ÁßªÈô§ "${track.title}" ÂêóÔºü`)) {
            return;
        }

        try {
            const result = await window.electronAPI.library.removeFromPlaylist(
                this.currentPlaylist.id,
                track.fileId
            );

            if (result.success) {
                console.log('‚úÖ PlaylistDetailPage: Ê≠åÊõ≤Â∑≤‰ªéÊ≠åÂçïÁßªÈô§');

                // ÈáçÊñ∞Âä†ËΩΩÊ≠åÂçï
                await this.loadPlaylistTracks();
                this.currentPlaylist.trackIds = this.currentPlaylist.trackIds.filter(id => id !== track.fileId);
                this.render();

                // Ëß¶ÂèëÊ≠åÂçïÊõ¥Êñ∞‰∫ã‰ª∂
                this.emit('playlistUpdated', this.currentPlaylist);

                if (window.app && window.app.showInfo) {
                    window.app.showInfo(`Â∑≤‰ªéÊ≠åÂçï‰∏≠ÁßªÈô§ "${track.title}"`);
                }
            } else {
                console.error('‚ùå PlaylistDetailPage: ÁßªÈô§Ê≠åÊõ≤Â§±Ë¥•', result.error);
                if (window.app && window.app.showError) {
                    window.app.showError(result.error || 'ÁßªÈô§Â§±Ë¥•');
                }
            }
        } catch (error) {
            console.error('‚ùå PlaylistDetailPage: ÁßªÈô§Ê≠åÊõ≤Â§±Ë¥•', error);
            if (window.app && window.app.showError) {
                window.app.showError('ÁßªÈô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    calculateTotalDuration() {
        if (!this.tracks || this.tracks.length === 0) return 0;

        return this.tracks.reduce((total, track) => {
            return total + (track.duration || 0);
        }, 0);
    }

    formatTotalDuration(totalSeconds) {
        if (!totalSeconds || totalSeconds <= 0) return '0 ÂàÜÈíü';

        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);

        if (hours > 0) {
            return `${hours} Â∞èÊó∂ ${minutes} ÂàÜÈíü`;
        } else {
            return `${minutes} ÂàÜÈíü`;
        }
    }

    formatDuration(duration) {
        if (!duration || duration <= 0) return '--:--';

        const minutes = Math.floor(duration / 60);
        const seconds = Math.floor(duration % 60);
        return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Ê∏≤ÊüìÊ≠åÂçïÂ∞ÅÈù¢
    renderPlaylistCover() {
        if (this.currentPlaylist && this.currentPlaylist.coverImage) {
            // Â¶ÇÊûúÊúâËá™ÂÆö‰πâÂ∞ÅÈù¢ÔºåÊòæÁ§∫Ëá™ÂÆö‰πâÂ∞ÅÈù¢
            return `
                <img class="cover-image" src="file://${this.currentPlaylist.coverImage}" alt="Ê≠åÂçïÂ∞ÅÈù¢" />
            `;
        } else {
            // ÊòæÁ§∫ÈªòËÆ§Âç†‰ΩçÁ¨¶
            return `
                <div class="cover-placeholder">
                    <svg class="cover-icon" viewBox="0 0 24 24">
                        <path d="M15,6H3V8H15V6M15,10H3V12H15V10M3,16H11V14H3V16M17,6V14.18C16.69,14.07 16.35,14 16,14A3,3 0 0,0 13,17A3,3 0 0,0 16,20A3,3 0 0,0 19,17V8H22V6H17Z"/>
                    </svg>
                </div>
            `;
        }
    }

    // ËÆæÁΩÆÂ∞ÅÈù¢Âè≥ÈîÆËèúÂçï‰∫ã‰ª∂ÁõëÂê¨Âô®
    setupCoverContextMenu() {
        const coverElement = this.container.querySelector('#playlist-cover');
        if (!coverElement) return;

        coverElement.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            this.showCoverContextMenu(e.clientX, e.clientY);
        });
    }

    // ÊòæÁ§∫Â∞ÅÈù¢Âè≥ÈîÆËèúÂçï
    showCoverContextMenu(x, y) {
        // ÁßªÈô§Áé∞ÊúâÁöÑËèúÂçï
        this.hideCoverContextMenu();

        const hasCustomCover = this.currentPlaylist && this.currentPlaylist.coverImage;

        const menu = document.createElement('div');
        menu.className = 'cover-context-menu';
        menu.innerHTML = `
            <div class="context-menu-item" id="add-cover">
                <svg class="menu-icon" viewBox="0 0 24 24">
                    <path d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z"/>
                </svg>
                <span>${hasCustomCover ? 'Êõ¥Êç¢Â∞ÅÈù¢' : 'Ê∑ªÂä†Â∞ÅÈù¢'}</span>
            </div>
            ${hasCustomCover ? `
            <div class="context-menu-item" id="remove-cover">
                <svg class="menu-icon" viewBox="0 0 24 24">
                    <path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"/>
                </svg>
                <span>ÁßªÈô§Â∞ÅÈù¢</span>
            </div>
            ` : ''}
        `;

        // ËÆæÁΩÆËèúÂçï‰ΩçÁΩÆ
        menu.style.position = 'fixed';
        menu.style.left = `${x}px`;
        menu.style.top = `${y}px`;
        menu.style.zIndex = '10000';

        document.body.appendChild(menu);

        // Ë∞ÉÊï¥ËèúÂçï‰ΩçÁΩÆÔºåÁ°Æ‰øù‰∏çË∂ÖÂá∫Â±èÂπï
        const rect = menu.getBoundingClientRect();
        if (rect.right > window.innerWidth) {
            menu.style.left = `${window.innerWidth - rect.width - 10}px`;
        }
        if (rect.bottom > window.innerHeight) {
            menu.style.top = `${window.innerHeight - rect.height - 10}px`;
        }

        // Ê∑ªÂä†ËèúÂçïÈ°π‰∫ã‰ª∂ÁõëÂê¨Âô®
        const addCoverItem = menu.querySelector('#add-cover');
        const removeCoverItem = menu.querySelector('#remove-cover');

        if (addCoverItem) {
            addCoverItem.addEventListener('click', async () => {
                this.hideCoverContextMenu();
                await this.selectAndSetCover();
            });
        }

        if (removeCoverItem) {
            removeCoverItem.addEventListener('click', async() => {
                this.hideCoverContextMenu();
                await this.removeCover();
            });
        }

        // ÁÇπÂáªÂ§ñÈÉ®ÂÖ≥Èó≠ËèúÂçï
        const closeMenu = (e) => {
            if (!menu.contains(e.target)) {
                this.hideCoverContextMenu();
                document.removeEventListener('click', closeMenu);
            }
        };
        setTimeout(() => {
            document.addEventListener('click', closeMenu);
        }, 0);
    }

    // ÈöêËóèÂ∞ÅÈù¢Âè≥ÈîÆËèúÂçï
    hideCoverContextMenu() {
        const existingMenu = document.querySelector('.cover-context-menu');
        if (existingMenu) {
            existingMenu.remove();
        }
    }

    // ÈÄâÊã©Âπ∂ËÆæÁΩÆÂ∞ÅÈù¢
    async selectAndSetCover() {
        try {
            console.log('üñºÔ∏è ÈÄâÊã©Ê≠åÂçïÂ∞ÅÈù¢ÂõæÁâá...');
            const result = await api.selectImageFile();

            if (result.success && result.path) {
                console.log('‚úÖ ÈÄâÊã©ÁöÑÂõæÁâáË∑ØÂæÑ:', result.path);
                await this.setCover(result.path);
            } else {
                console.log('‚ùå Áî®Êà∑ÂèñÊ∂àÈÄâÊã©ÂõæÁâá');
            }
        } catch (error) {
            console.error('‚ùå ÈÄâÊã©Â∞ÅÈù¢ÂõæÁâáÂ§±Ë¥•:', error);
            if (window.app && window.app.showError) {
                window.app.showError('ÈÄâÊã©ÂõæÁâáÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    // ËÆæÁΩÆÊ≠åÂçïÂ∞ÅÈù¢
    async setCover(imagePath) {
        try {
            if (!this.isValidImageFile(imagePath)) {
                throw new Error('‰∏çÊîØÊåÅÁöÑÂõæÁâáÊ†ºÂºèÔºåËØ∑ÈÄâÊã© JPG„ÄÅPNG„ÄÅGIF„ÄÅWebP Êàñ BMP Ê†ºÂºèÁöÑÂõæÁâá');
            }

            console.log(`üñºÔ∏è ËÆæÁΩÆÊ≠åÂçïÂ∞ÅÈù¢: ${this.currentPlaylist.id} -> ${imagePath}`);
            const result = await api.updatePlaylistCover(this.currentPlaylist.id, imagePath);

            if (result.success) {
                // Êõ¥Êñ∞ÂΩìÂâçÊ≠åÂçïÂØπË±°
                this.currentPlaylist.coverImage = imagePath;
                this.updateCoverDisplay();

                // Ëß¶ÂèëÊ≠åÂçïÊõ¥Êñ∞‰∫ã‰ª∂
                this.emit('playlistUpdated', this.currentPlaylist);
                this.emit('playlistCoverUpdated', this.currentPlaylist);
                console.log('‚úÖ Ê≠åÂçïÂ∞ÅÈù¢ËÆæÁΩÆÊàêÂäü');
                if (window.app && window.app.showInfo) {
                    window.app.showInfo('Ê≠åÂçïÂ∞ÅÈù¢ËÆæÁΩÆÊàêÂäü');
                }
            } else {
                throw new Error(result.error || 'ËÆæÁΩÆÂ∞ÅÈù¢Â§±Ë¥•');
            }
        } catch (error) {
            console.error('‚ùå ËÆæÁΩÆÊ≠åÂçïÂ∞ÅÈù¢Â§±Ë¥•:', error);
            if (window.app && window.app.showError) {
                window.app.showError(error.message || 'ËÆæÁΩÆÂ∞ÅÈù¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    // ÁßªÈô§Ê≠åÂçïÂ∞ÅÈù¢
    async removeCover() {
        try {
            if (!confirm('Á°ÆÂÆöË¶ÅÁßªÈô§Ê≠åÂçïÂ∞ÅÈù¢ÂêóÔºü')) {
                return;
            }

            console.log(`üóëÔ∏è ÁßªÈô§Ê≠åÂçïÂ∞ÅÈù¢: ${this.currentPlaylist.id}`);
            const result = await api.removePlaylistCover(this.currentPlaylist.id);

            if (result.success) {
                // Êõ¥Êñ∞ÂΩìÂâçÊ≠åÂçïÂØπË±°
                this.currentPlaylist.coverImage = null;
                this.updateCoverDisplay();

                // Ëß¶ÂèëÊ≠åÂçïÊõ¥Êñ∞‰∫ã‰ª∂
                this.emit('playlistUpdated', this.currentPlaylist);
                this.emit('playlistCoverUpdated', this.currentPlaylist);
                console.log('‚úÖ Ê≠åÂçïÂ∞ÅÈù¢ÁßªÈô§ÊàêÂäü');
                if (window.app && window.app.showInfo) {
                    window.app.showInfo('Ê≠åÂçïÂ∞ÅÈù¢Â∑≤ÁßªÈô§');
                }
            } else {
                throw new Error(result.error || 'ÁßªÈô§Â∞ÅÈù¢Â§±Ë¥•');
            }
        } catch (error) {
            console.error('‚ùå ÁßªÈô§Ê≠åÂçïÂ∞ÅÈù¢Â§±Ë¥•:', error);
            if (window.app && window.app.showError) {
                window.app.showError(error.message || 'ÁßªÈô§Â∞ÅÈù¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
            }
        }
    }

    // Êõ¥Êñ∞Â∞ÅÈù¢ÊòæÁ§∫
    updateCoverDisplay() {
        const coverElement = this.container.querySelector('#playlist-cover');
        if (coverElement) {
            coverElement.innerHTML = this.renderPlaylistCover() + '<div class="cover-shadow"></div>';
        }
    }

    // È™åËØÅÂõæÁâáÊñá‰ª∂
    isValidImageFile(filePath) {
        if (!filePath || typeof filePath !== 'string') {
            return false;
        }

        const validExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp'];
        const extension = filePath.toLowerCase().substring(filePath.lastIndexOf('.'));
        return validExtensions.includes(extension);
    }
}
