class Component extends EventEmitter {
    constructor(element) {
        super();
        this.element = typeof element === 'string' ? document.querySelector(element) : element;
        this.isDestroyed = false;

        // ËµÑÊ∫êÁÆ°ÁêÜ
        this.eventListeners = [];
        this.apiEventListeners = [];
        this.timers = [];
        this.observers = [];
        this.disposables = [];

        if (!this.element) {
            console.error('‚ùå Component element not found');
            return;
        }

        this.init();
    }

    init() {
        // Â≠êÁ±ªÂÆûÁé∞
    }

    // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
    addEventListenerManaged(element, event, handler, options) {
        element.addEventListener(event, handler, options);
        this.eventListeners.push({ element, event, handler, options });
        return () => this.removeEventListenerManaged(element, event, handler);
    }

    // ÁßªÈô§ÁâπÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
    removeEventListenerManaged(element, event, handler) {
        element.removeEventListener(event, handler);
        this.eventListeners = this.eventListeners.filter(
            listener => !(listener.element === element && listener.event === event && listener.handler === handler)
        );
    }

    // Ê∑ªÂä†API‰∫ã‰ª∂ÁõëÂê¨Âô®
    addAPIEventListenerManaged(event, handler) {
        if (typeof api !== 'undefined' && api && api.on) {
            console.log(`üîó Component: Ê∑ªÂä†API‰∫ã‰ª∂ÁõëÂê¨Âô® ${event}`);
            api.on(event, handler);
            this.apiEventListeners.push({ event, handler });
        } else {
            console.warn(`‚ö†Ô∏è Component: APIÂØπË±°‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÊ∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô® ${event}`);
        }
        return () => this.removeAPIEventListenerManaged(event, handler);
    }

    // ÁßªÈô§ÁâπÂÆöAPI‰∫ã‰ª∂ÁõëÂê¨Âô®
    removeAPIEventListenerManaged(event, handler) {
        if (typeof api !== 'undefined' && api.off) {
            api.off(event, handler);
        }
        this.apiEventListeners = this.apiEventListeners.filter(
            listener => !(listener.event === event && listener.handler === handler)
        );
    }

    // Ê∑ªÂä†ÂÆöÊó∂Âô®
    addTimerManaged(timerId) {
        this.timers.push(timerId);
        return timerId;
    }

    // Ê∑ªÂä†ËßÇÂØüËÄÖ
    addObserverManaged(observer) {
        this.observers.push(observer);
        return observer;
    }

    // Ê∑ªÂä†ÂèØÊ∏ÖÁêÜËµÑÊ∫ê
    addDisposable(disposable) {
        this.disposables.push(disposable);
    }

    destroy() {
        if (this.isDestroyed) return;

        this.isDestroyed = true;

        // Ê∏ÖÁêÜÊâÄÊúâ‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.removeAllListeners();

        // Ê∏ÖÁêÜÊâÄÊúâAPI‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.removeAllAPIListeners();

        // Ê∏ÖÁêÜÂÆöÊó∂Âô®
        this.clearAllTimers();

        // Ê∏ÖÁêÜËßÇÂØüËÄÖ
        this.disconnectAllObservers();

        // Ê∏ÖÁêÜÂÖ∂‰ªñËµÑÊ∫ê
        this.disposeAllResources();

        console.log(`üóëÔ∏è Component destroyed: ${this.constructor.name}`);
    }

    removeAllListeners() {
        // ÁßªÈô§ÊâÄÊúâDOM‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.eventListeners.forEach(({ element, event, handler }) => {
            try {
                element.removeEventListener(event, handler);
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to remove event listener:', error);
            }
        });
        this.eventListeners = [];
    }

    removeAllAPIListeners() {
        // ÁßªÈô§ÊâÄÊúâAPI‰∫ã‰ª∂ÁõëÂê¨Âô®
        console.log(`üóëÔ∏è Component: ÁßªÈô§ ${this.apiEventListeners.length} ‰∏™API‰∫ã‰ª∂ÁõëÂê¨Âô®`);
        this.apiEventListeners.forEach(({ event, handler }) => {
            try {
                if (typeof api !== 'undefined' && api && api.off) {
                    console.log(`üóëÔ∏è Component: ÁßªÈô§API‰∫ã‰ª∂ÁõëÂê¨Âô® ${event}`);
                    api.off(event, handler);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to remove API event listener:', error);
            }
        });
        this.apiEventListeners = [];
    }

    clearAllTimers() {
        // Ê∏ÖÁêÜÊâÄÊúâÂÆöÊó∂Âô®
        this.timers.forEach(timerId => {
            try {
                clearTimeout(timerId);
                clearInterval(timerId);
            } catch (error) {
                console.warn('Failed to clear timer:', error);
            }
        });
        this.timers = [];
    }

    disconnectAllObservers() {
        // Êñ≠ÂºÄÊâÄÊúâËßÇÂØüËÄÖ
        this.observers.forEach(observer => {
            try {
                if (observer && typeof observer.disconnect === 'function') {
                    observer.disconnect();
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to disconnect observer:', error);
            }
        });
        this.observers = [];
    }

    disposeAllResources() {
        // Ê∏ÖÁêÜÂÖ∂‰ªñËµÑÊ∫ê
        this.disposables.forEach(disposable => {
            try {
                if (typeof disposable === 'function') {
                    disposable();
                } else if (disposable && typeof disposable.dispose === 'function') {
                    disposable.dispose();
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to dispose resource:', error);
            }
        });
        this.disposables = [];
    }
}

window.Component = Component;
